---
# golangci-lint configuration file made by @ccoVeille
# Source: https://github.com/ccoVeille/golangci-lint-config-examples/
# Author: @ccoVeille
# License: MIT
# Variant: 10-cautious
# Version: v2.0.0
#
version: "2"
linters:
  # some linters are enabled by default
  # https://golangci-lint.run/usage/linters/
  #
  # enable some extra linters
  enable:
    # Errcheck is a program for checking for unchecked errors in Go code.
    - errcheck

    # Vet examines Go source code and reports suspicious constructs.
    - govet

    # Detects when assignments to existing variables are not used.
    - ineffassign

    # It's a set of rules from staticcheck. See https://staticcheck.io/
    - staticcheck

    # Checks Go code for unused constants, variables, functions and types.
    - unused

    # Fast, configurable, extensible, flexible, and beautiful linter for Go.
    # Drop-in replacement of golint.
    - revive

    # make sure to use t.Helper() when needed
    - thelper

    # mirror suggests rewrites to avoid unnecessary []byte/string conversion
    - mirror

    # detect the possibility to use variables/constants from the Go standard library.
    - usestdlibvars

    # Finds commonly misspelled English words.
    - misspell

    # Checks for duplicate words in the source code.
    - dupword

    # linter to detect errors invalid key values count
    - loggercheck

    # detects nested contexts in loops or function literals
    - fatcontext

    # detect when a package or method could be replaced by one from the standard library
    - exptostd

    # detects nested contexts in loops or function literals
    - fatcontext

    # Reports uses of functions with replacement inside the testing package.
    - usetesting

  settings:
    revive:
      rules:
        # Check for commonly mistaken usages of the sync/atomic package
        - name: atomic

        # Blank import should be only in a main or test package, or have a comment justifying it.
        - name: blank-imports

        # Spots comments not starting with a space
        - name: comment-spacings

        # context.Context() should be the first parameter of a function when provided as argument.
        - name: context-as-argument
          arguments:
            - allowTypesBefore: "*testing.T"

        # Basic types should not be used as a key in `context.WithValue`
        - name: context-keys-type

        # warns on some common mistakes when using defer statement.
        - name: defer

        # Importing with `.` makes the programs much harder to understand
        - name: dot-imports

        # suggest to simplify if-then-else constructions when possible
        - name: early-return

        # Empty blocks make code less readable and could be a symptom of a bug or unfinished refactoring.
        - name: empty-block

        # for better readability, variables of type `error` must be named with the prefix `err`.
        - name: error-naming

        # for better readability, the errors should be last in the list of returned values by a function.
        - name: error-return

        # for better readability, error messages should not be capitalized or end with punctuation or a newline.
        - name: error-strings

        # report when replacing `errors.New(fmt.Sprintf())` with `fmt.Errorf()` is possible
        - name: errorf

        # check naming and commenting conventions on exported symbols.
        - name: exported
          arguments:
            # make error messages clearer
            - "sayRepetitiveInsteadOfStutters"

        # Checking if an error is nil to just after return the error or nil is redundant.
        - name: if-return

        # incrementing an integer variable by 1 is recommended to be done using the `++` operator
        - name: increment-decrement

        # highlights redundant else-blocks that can be eliminated from the code
        - name: indent-error-flow

        # This rule suggests a shorter way of writing ranges that do not use the second value.
        - name: range

        # receiver names in a method should reflect the struct name (p for Person, for example)
        - name: receiver-naming

        # redefining built in names (true, false, append, make) can lead to bugs very difficult to detect.
        - name: redefines-builtin-id

        # redundant else-blocks that can be eliminated from the code.
        - name: superfluous-else

        # prevent confusing name for variables when using `time` package
        - name: time-naming

        # warns when an exported function or method returns a value of an un-exported type.
        - name: unexported-return

        # spots and proposes to remove unreachable code. also helps to spot errors
        - name: unreachable-code

        # Functions or methods with unused parameters can be a symptom of an unfinished refactoring or a bug.
        - name: unused-parameter

        # warns on useless break statements in case clauses of switch and select statements
        - name: useless-break

        # report when a variable declaration can be simplified
        - name: var-declaration

        # warns when initialism, variable or package naming conventions are not followed.
        - name: var-naming

    errcheck:
      exclude-functions:
        - fmt.Fprintf
        - fmt.Fprint
        - fmt.Fprintln

    misspell:
      locale: US